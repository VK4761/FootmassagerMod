// Relay Pins
const int relayMotorPin = 19;      // Relay IN4
const int relaySolenoidPin = 21;   // Relay IN3 (Solenoid Valve)
const int relayPumpPin = 22;       // Relay IN2 (Not used in this setup)
const int relayHeatPin = 13;

// L298N for Motor Driver
const int motorIn1 = 26;    // IN1
const int motorIn2 = 25;    // IN2
const int motorENA = 33;    // ENA (PWM)

// // L298N for Pressure Pump
// const int pumpIn3 = 12;     // IN3
// const int pumpIn4 = 13;     // IN4
// const int pumpENB = 32;     // ENB (PWM)

// Define touch sensor pins
const int touchMotorPin = 4;      // Touch sensor connected to pin D4
const int touchSystemPin = 15;    // Touch sensor connected to pin D15
const int touchPressurePin = 14;  // Touch sensor connected to pin D14
const int touchHeatPin = 12; //Touch Sensor connected to pin D15

// Define duty cycles corresponding to desired speeds
const int dutyCycle50 = 190;  // 50% of 255
const int dutyCycle75 = 200;  // 75% of 255
const int dutyCycle95 = 225;  // 95% of 255


// Define thresholds for pressure modulation
const unsigned long lowTime = 7000; 
const unsigned long medTime = 12000;
const unsigned long maxTime = 15000;


// Modulation timing
unsigned long lastModulationTime = 0;
const unsigned long modulationDelay = 50; // Adjust as needed for smooth oscillation
int modulationDirection = 1;  // 1 for increasing, -1 for decreasing
int currentPumpSpeed = 0;     // Holds the current speed


// Define MotorState
volatile int MotorState = 0; // 0: Off, 1: 50%, 2: 75%, 3: 95%

// Define PressureState
volatile int PressureState = 0; // 0: Off, 1: Low, 2: Medium, 3: High

// Define DeviceState
volatile int DeviceState = 0; // 0: Off, 1: On


// Define HeatState
volatile int HeatState = 0; // 0: Off, 1: On


// Debounce settings
const unsigned long debounceDelay = 200; // in milliseconds

// Touch threshold
const int touchThreshold = 30;      // Adjust based on your environment

// Timing for motor actions
unsigned long previousMillis = 0;
const unsigned long motorInterval = 10000; // 10 seconds

// Function prototypes
void setMotorSpeed(int dutyCycle);
void updateMotor();
void updateHeatState();
void pressureCycleLoop(unsigned long maximumTimeToPump);
void updatePressure();
void updateDeviceState();
void checkTouchSensors();

// Structure for touch sensor configuration
struct TouchSensorConfig {
    int pin;                          // Pin number
    volatile int *stateInt;           // Pointer to int state variable (for MotorState, DeviceState, PressureState)
    void (*updateFunc)();             // Function to call when state changes
    unsigned long lastTouchTime;      // Last touch time for debounce
    bool lastTouchState;              // Previous touch state for edge detection
};


// Define Pressure Cycle States
enum PressureCycleState {
    PUMP_ON,
    HOLD_PRESSURE,
    RELEASE_PRESSURE,
    IDLE
};
// Static variables to maintain state across function calls
static PressureCycleState currentState = IDLE;
static unsigned long stateStartTime = 0;

// Initialize sensors with individual debounce timing
TouchSensorConfig sensors[] = {
    {touchMotorPin, &MotorState, updateMotor, 0, false},          // Motor sensor
    {touchSystemPin, &DeviceState, updateDeviceState, 0, false},  // System sensor
    {touchPressurePin, &PressureState, updatePressure, 0, false},  // Pressure sensor
    {touchHeatPin, &HeatState, updateHeatState, 0, false}         //Heat Sensor
};

const int numSensors = sizeof(sensors) / sizeof(sensors[0]);

/**
 * Sets the motor speed by writing to the PWM channel.
 *
 * @param dutyCycle The PWM duty cycle to set (0-255).
 */
void setMotorSpeed(int dutyCycle) {
    ledcWrite(motorENA, dutyCycle); // Channel 0 for motor
}

/**
 * Sets the pump speed by writing to the PWM channel.
 *
 * @param dutyCycle The PWM duty cycle to set (0-255).
 */
// void setPumpSpeed(int dutyCycle) {
//     ledcWrite(pumpENB, dutyCycle); // Channel 1 for pump
// }

/**
 * Sets up the GPIO pins and initializes the motor, pump, and relays.
 */
void setup() {
    // Start Serial communication for debugging
    Serial.begin(9600);

    // Configure pins as outputs
    pinMode(relayMotorPin, OUTPUT);
    pinMode(relaySolenoidPin, OUTPUT);
    pinMode(relayPumpPin, OUTPUT); // 
    pinMode(relayHeatPin, OUTPUT);

    pinMode(motorIn1, OUTPUT);
    pinMode(motorIn2, OUTPUT);

    // pinMode(pumpIn3, OUTPUT);
    // pinMode(pumpIn4, OUTPUT);

    // Configure touch sensor pins as inputs with internal pull-up resistors
    pinMode(touchMotorPin, INPUT_PULLUP);
    pinMode(touchSystemPin, INPUT_PULLUP);
    pinMode(touchPressurePin, INPUT_PULLUP);

    // Initialize motor and relays in the off state
    digitalWrite(relayMotorPin, LOW);
    digitalWrite(relaySolenoidPin, HIGH);
    digitalWrite(relayPumpPin, LOW); // Ensure pump relay is off if used
    digitalWrite(relayHeatPin, LOW);


    digitalWrite(motorIn1, HIGH);
    digitalWrite(motorIn2, LOW);

    // digitalWrite(pumpIn3, HIGH);
    // digitalWrite(pumpIn4, LOW);

    // Attach PWM functionality to motorENA pin with specified frequency and resolution
    // Using ledcAttach (as per your original setup)
    ledcAttach(motorENA, 25000, 8);  // Channel 0, 25 kHz frequency, 8-bit resolution
    // ledcAttach(pumpENB, 25000, 8);   // Channel 1, 25 kHz frequency, 8-bit resolution

    // Ensure motor and pump are off at startup
    setMotorSpeed(0);

    // Log initial state
    Serial.println("Motor initialized. State: Off");
    Serial.println("Pump initialized. State: Off");
    Serial.println("Device State: OFF");
}





/**
 * Toggles the device state and updates the system accordingly.
 */
void updateDeviceState() {
    if (DeviceState == 1) { // Turn the device ON
        Serial.println("Device State: ON");

        // Turn on the device
        digitalWrite(relayMotorPin, HIGH); // Example action: turn on relay

        // Add additional logic for activating components, if needed

    } else { // Turn the device OFF
        Serial.println("Device State: OFF");

        // Turn off the motor if running
        if (MotorState != 0) {
            MotorState = 0; // Reset MotorState
            setMotorSpeed(0); // Stop the motor
            digitalWrite(relayMotorPin, LOW); // Turn off the relay
            Serial.println("Motor turned off.");
        }
        PressureState = 0; // Reset PressureState
        currentState = IDLE;

        digitalWrite(relayPumpPin, LOW); // Close the pump
        digitalWrite(relaySolenoidPin, LOW); // Opens the Valve
        
        Serial.println("Pressure turned off.");
        // Ensure all relays are off
        if (HeatState != 0) {
            HeatState = 0;
            updateHeatState();
        }
        // currentState = IDLE;

        // Add any additional logic for deactivating components, if needed
    }
}



void updateHeatState()
{
  if(HeatState == 1)
  {
        Serial.println("Heat State: ON");
        digitalWrite(relayHeatPin, HIGH); // Turn on heat relay
  } 
  else 
  { 
      Serial.println("Heat State: OFF");
      digitalWrite(relayHeatPin, LOW); // Turn off heat relay
  }
}



/**
 * Updates the motor speed based on the current MotorState.
 */
void updateMotor() {
    if (DeviceState == 0) {
        // Device is OFF, ensure motor is off
        setMotorSpeed(0);
        digitalWrite(relayMotorPin, LOW);
        Serial.println("Motor State: Off (Device is OFF)");
        return;
    }

    switch (MotorState) {
        case 0:
            // Motor off
            setMotorSpeed(0);
            digitalWrite(relayMotorPin, LOW);
            Serial.println("Motor State: Off");
            break;
        case 1:
            // 50% speed
            digitalWrite(relayMotorPin, HIGH); // Turn relay on
            setMotorSpeed(dutyCycle50);
            Serial.println("Motor State: 50% Speed");
            break;
        case 2:
            // 75% speed
            digitalWrite(relayMotorPin, HIGH); // Turn relay on
            setMotorSpeed(dutyCycle75);
            Serial.println("Motor State: 75% Speed");
            break;
        case 3:
            // 95% speed
            digitalWrite(relayMotorPin, HIGH); // Turn relay on
            setMotorSpeed(dutyCycle95);
            Serial.println("Motor State: 95% Speed");
            break;
        default:
            // Safety case to turn off the motor
            setMotorSpeed(0);
            digitalWrite(relayMotorPin, LOW);
            Serial.println("Motor State: Off (Error)");
            MotorState = 0;
            break;
    }
}



/**
 * Handles the pressure cycling based on the current state.
 *
 * @param maxPumpTime The duration to hold the pressure in milliseconds.
 */
void pressureCycleLoop(unsigned long maxPumpTime) {
    unsigned long currentTime = millis();

    switch (currentState) {
        case PUMP_ON:
            if (stateStartTime == 0) { // Just entered PUMP_ON
                // Activate pump and close solenoid
                // setPumpSpeed(maxDuty);
                digitalWrite(relayPumpPin, HIGH);         // Pump ON
                digitalWrite(relaySolenoidPin, HIGH);     // Solenoid CLOSED

                Serial.println("PUMP_ON: Pump activated and solenoid closed.");
                stateStartTime = currentTime;             // Record when PUMP_ON started
            }

            // Check if maxPumpTime has elapsed
            if (currentTime - stateStartTime >= maxPumpTime) {
                // Transition to HOLD_PRESSURE
                currentState = HOLD_PRESSURE;
                stateStartTime = 0; // Reset for next state
                Serial.println("PUMP_ON: Max pump time elapsed. Transitioning to HOLD_PRESSURE.");
            }
            break;

        case HOLD_PRESSURE:
            if (stateStartTime == 0) { // Just entered HOLD_PRESSURE
                // Turn pump OFF, solenoid remains CLOSED
                digitalWrite(relayPumpPin, LOW);           // Pump OFF
                digitalWrite(relaySolenoidPin, HIGH);      // Solenoid CLOSED

                Serial.println("HOLD_PRESSURE: Pump turned OFF, solenoid remains closed.");
                stateStartTime = currentTime;              // Record when HOLD_PRESSURE started
            }

            // Check if maxPumpTime has elapsed
            if (currentTime - stateStartTime >= maxPumpTime) {
                // Transition to RELEASE_PRESSURE
                currentState = RELEASE_PRESSURE;
                stateStartTime = 0; // Reset for next state
                Serial.println("HOLD_PRESSURE: Max hold time elapsed. Transitioning to RELEASE_PRESSURE.");
            }
            break;

        case RELEASE_PRESSURE:
            if (stateStartTime == 0) { // Just entered RELEASE_PRESSURE
                // Open solenoid to release pressure
                digitalWrite(relaySolenoidPin, LOW);      // Solenoid OPEN
                Serial.println("RELEASE_PRESSURE: Solenoid opened to release pressure.");
                stateStartTime = currentTime;             // Record when RELEASE_PRESSURE started
            }

            // Check if 5 seconds have elapsed
            if (currentTime - stateStartTime >= 5000) { // 5,000 ms = 5 seconds
                // Close solenoid after releasing pressure
                digitalWrite(relaySolenoidPin, HIGH);     // Solenoid CLOSED
                Serial.println("RELEASE_PRESSURE: Solenoid closed. Cycle complete.");

                // Reset for the next cycle
                currentState = PUMP_ON;
                stateStartTime = 0; // Reset for next state
            }
            break;

        case IDLE:
        default:
            if (stateStartTime == 0) { // Just entered IDLE
                // Ensure pump and solenoid are OFF
                digitalWrite(relayPumpPin, LOW);          // Pump OFF
                digitalWrite(relaySolenoidPin, LOW);     // Solenoid CLOSED

                Serial.println("IDLE: Pump is OFF, solenoid is OPEN.");
                stateStartTime = currentTime;             // Record when IDLE started
            }
            break;
    }
}

/**
 * Updates the pump and solenoid based on the current PressureState.
 */
void updatePressure() {
    static int lastPressureState = -1; // Track changes in PressureState
    static unsigned long maxPumpTime = 0;
    static bool cycleActive = false;

    // Check if Device is OFF or PressureState is 0 (OFF)
    if (DeviceState == 0 || PressureState == 0) {
        // Turn off pump and close solenoid
        digitalWrite(relayPumpPin, LOW);          // Pump OFF
        digitalWrite(relaySolenoidPin, LOW);     // Solenoid CLOSED

        // Reset the cycle
        cycleActive = false;
        currentState = IDLE;
        stateStartTime = 0;
        // Serial.println("updatePressure: Pressure system stopped. Device is OFF or PressureState is 0.");
        return;
    }

    // Detect changes in PressureState and adjust hold durations
    if (PressureState != lastPressureState) {
        switch (PressureState) {
            case 1: // Low Pressure
                maxPumpTime = lowTime;             // 7,000 ms
                Serial.println("updatePressure: Low Pressure selected.");
                break;
            case 2: // Medium Pressure
                maxPumpTime = medTime;             // 12,000 ms
                Serial.println("updatePressure: Medium Pressure selected.");
                break;
            case 3: // High Pressure
                maxPumpTime = maxTime;             // 15,000 ms
                Serial.println("updatePressure: High Pressure selected.");
                break;
            default:
                // Invalid state, turn everything off
                digitalWrite(relayPumpPin, LOW);          // Pump OFF
                digitalWrite(relaySolenoidPin, HIGH);     // Solenoid CLOSED
                currentState = IDLE;
                stateStartTime = 0;
                Serial.println("updatePressure: Pressure State Invalid. System turned OFF.");
                return; // Exit the function
        }

        lastPressureState = PressureState; // Update state tracker
        // Reset the pressure cycle to initiate a new cycle
        cycleActive = false;
        currentState = PUMP_ON;
        stateStartTime = 0;
    }

    // Start the pressure cycle if not active
    if (!cycleActive) {
        cycleActive = true;
        // Use a fixed maxDuty (e.g., 230) as per your requirements
        pressureCycleLoop(maxPumpTime);
    } else {
        // Continue the pressure cycle
        pressureCycleLoop(maxPumpTime);
    }
}
void checkTouchSensors() {
    unsigned long currentTime = millis();

    for (int i = 0; i < numSensors; ++i) {
        // Read touch sensor value
        int touchValue = touchRead(sensors[i].pin);
        bool isTouched = touchValue < touchThreshold;

        // Edge detection: check if the touch state has changed
        if (isTouched != sensors[i].lastTouchState) {
            sensors[i].lastTouchState = isTouched;
            if (isTouched) { // Touch started
                if (currentTime - sensors[i].lastTouchTime > debounceDelay) {
                    sensors[i].lastTouchTime = currentTime;

                    if (sensors[i].stateInt != nullptr) {
                        if (sensors[i].stateInt == &DeviceState || sensors[i].stateInt == &HeatState) {
                            // Toggle DeviceState and HeatState between 0 and 1
                            *sensors[i].stateInt = 1 - *sensors[i].stateInt;
                        } else {
                            // Only allow if Device is ON
                            if (DeviceState == 1) {
                                // Increment state with wrap-around
                                *sensors[i].stateInt = (*sensors[i].stateInt + 1) % 4; // 0 to 3
                            } else {
                                // Can't change state, device is off
                                const char* stateName = (sensors[i].stateInt == &MotorState) ? "MotorState" :
                                                        (sensors[i].stateInt == &PressureState) ? "PressureState" : "UnknownState";
                                Serial.print("Cannot change ");
                                Serial.print(stateName);
                                Serial.println(": Device is OFF");
                            }
                        }
                    }

                    // Call update function if provided
                    if (sensors[i].updateFunc) {
                        sensors[i].updateFunc();
                    }

                    // Debugging output
                    Serial.print("Touch detected on pin ");
                    Serial.print(sensors[i].pin);
                    Serial.print(". Updated state: ");
                    if (sensors[i].stateInt != nullptr && (sensors[i].stateInt == &DeviceState || sensors[i].stateInt == &HeatState)) {
                        Serial.println(*sensors[i].stateInt == 1 ? "1 (ON)" : "0 (OFF)");
                    } else if (sensors[i].stateInt != nullptr) {
                        Serial.println(*sensors[i].stateInt);
                    }
                }
            }
        }
    }
}


/**
 * Main loop to control the motor, pump, and handle touch sensor input.
 */
void loop() {
    unsigned long currentMillis = millis();

    // Check touch sensors
    checkTouchSensors();
    // Update pressure system
    
    updatePressure();
    // Handle motor interval actions if needed
    if (currentMillis - previousMillis >= motorInterval) {
        previousMillis = currentMillis;
        // Example: You can implement timed actions here if required
        // Currently, motor speed is solely controlled by touch input
    }

    // Additional non-blocking tasks can be added here
}
